<?php
// $Id$

/**
 * @file
 * Imagemaps uses an image field and an image style to display the images.
 * Rendering the image in imagemaps modus will allow you to add pointers to
 * the image. A second text field will be used to store the coordinates.
 *
 * You will find configuration for the form and elements you want to hook
 * imagempas too as well as global configuration for the image_style, effects
 * and extra properties.
 *
 */

/**
 * Implements hook_menu().
 */
function imagemaps_menu() {

  $items['admin/config/media/imagemaps/settings'] = array(
    'title' => 'Imagemaps settings',
    'description' => 'Configuration options for imagemaps usage.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagemaps_settings_page'),
    'access arguments' => array('access administration pages'),
    'file' => 'imagemaps.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_form_alter().
 */
function imagemaps_form_alter(& $form, & $form_state, $form_id) {

  $fields = variable_get('imagemaps', array());
  if (!empty($fields)) {
    foreach ($fields as $field => $imagemap) {
      $parts = explode("__", $field);
      if ($form_id == $parts[1]  . '_' . $parts[0] . '_form') {
        _imagemaps_form_alter($form, $form_state, $imagemap);
      }
      // TODO fix the other entities. I hope they are conventionally the same.
    }
  }

}

/**
 * Implements hook_field_formatter_info().
 */
function imagemaps_field_formatter_info() {

  return array(
    'image_imagemap' => array(
      'label' => t('Imagemap'),
      'field types' => array('image'),
    ),
  );

}

/**
 * Implements hook_field_formatter_view().
 */
function imagemaps_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  switch ($display['type']) {
    case 'image_imagemap':

      $output = '';
      $item = $items[0];
      $maps = _imagemaps_load_imagemaps();
      foreach ($maps as $map) {
        if ($map['entity'] == $entity_type && $map['bundle'] == $instance['bundle']) {
          $output = imagemaps_render($entity, $map);
        }
      }

      $element[0] = array('#markup' => $output);
      break;
  }

  return $element;

}

/**
 * Helper function to alter a form with given imagemap fields.
 */
function _imagemaps_form_alter(& $form, & $form_state, $imagemap) {

  module_load_include('inc', 'imagemaps', 'imagemaps.admin');

  // Add the imagemap behavior to this form.
  imagemaps_manage_display($form[$imagemap['field_image']], $form[$imagemap['field_data']], $imagemap['field_image_style']);

}

/**
 * Render the imagemap by entity and imagemap configuration.
 * This function will be used on frontend displays.
 * @see imagemaps_manage_display
 *   Administration form function to achieve the same effect.
 */
function imagemaps_render($entity, $map) {

  $language = isset($entity->language) ? $entity->language : 'und';
  $image_field = $map['field_image'];
  $data_field = $map['field_data'];

  $output = '';
  if (isset($entity->{$image_field}[$language][0]) && isset($entity->{$data_field}[$language][0])) {

    $output = _imagemaps_render($entity->{$image_field}[$language][0]['uri'], $entity->{$data_field}[$language][0]['value'], $map['image_style'], $language);

    // Attach the javascript and css files for the imagemap UI.
    drupal_add_js(drupal_get_path('module', 'imagemaps') . '/imagemaps.js');
    drupal_add_css(drupal_get_path('module', 'imagemaps') . '/imagemaps.css');

  }

  return $output;

}

/**
 * Helper function to render the imagemap.
 *
 * @param string $image_uri
 *   The uri of the image
 * @param string $storage
 *   The stored coordinates in raw format
 * @param string $language
 *   The language to be used.
 * @return
 *   A string with valid html with the rendered imagemap.
 */
function _imagemaps_render($image_uri, $storage, $image_style, $language = NULL) {

  $output = '';

  $properties = _imagemaps_load_imagestyle($image_style);

  $variables = array('path' => $image_uri, 'style_name' => $image_style);
  $output .= '<div id="media-imagemap" style="width: ' . $properties['width'] . 'px; height: ' . $properties['height'] . 'px">';
  $output .= theme('image_style', $variables);

  // List the coordinates.
  if (count($storage) > 0) {
    foreach (explode(";", $storage) as $marker) {
      parse_str($marker);
      // available: x, y, id, description.
      $output .= '<a href="#" rel="' . $x . '-' . $y . '" title="' . check_plain($description) . '" alt="' . check_plain($description) . '" class="bullet"></a>';
    }
  }
  $output .= '</div>';

  return $output;

}

/**
 * Helper function to get DOM properties for imagestyles.
 */
function _imagemaps_load_imagestyle($image_style) {

  static $image_styles = array();

  if (!isset($image_styles[$image_style])) {
    // Fetch the $image_style image style, using its width and height
    // for wrap the image rendered by image style.
    $properties = image_style_load($image_style);
    foreach ($properties['effects'] as $effect) {
      $image_styles[$image_style]['name'] = $image_style;
      $image_styles[$image_style]['width'] = $effect['data']['width'];
      $image_styles[$image_style]['height'] = $effect['data']['height'];
      break;
    }
  }

  return $image_styles[$image_style];

}

/**
 * Helper function to fetch the imagemaps.
 */
function _imagemaps_load_imagemaps() {

  $maps = array();

  $fields = variable_get('imagemaps', array());
  if (!empty($fields)) {
    foreach ($fields as $field => $imagemap) {
      $parts = explode("__", $field);
      if ($parts[0] != 'imagemaps') {
        $maps[] = array(
          'field' => $field,
          'field_image' => $imagemap['field_image'],
          'field_data' => $imagemap['field_data'],
          'entity' => $parts[0],
          'bundle' => $parts[1],
          'image_style' => $imagemap['field_image_style']
        );
      }
    }
  }

  return $maps;

}