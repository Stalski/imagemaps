<?php
// $Id$

/**
 * @file
 * Create images with one or more annotations on them.
 */

/**
 * Implements hook_field_info_alter().
 */
function imagemaps_field_info_alter(&$info) {
  // Change properties for fields of type 'image'.
  if (isset($info['image'])) {
    $info['image']['instance_settings']['imagemap'] = FALSE;
    $info['image']['module'] = 'imagemaps';
  }
}

/**
 * Imagemaps field settings form.
 */
function imagemaps_field_settings_form($field, $instance) {
  $form = image_field_settings_form($field, $instance);
  return $form;
}

/**
 * Imagemaps instance settings form.
 */
function imagemaps_field_instance_settings_form($field, $instance) {
  $form = image_field_instance_settings_form($field, $instance);

  // @todo maybe add validate function to make sure the limit is set to 1
  // or are we going to support multiple images too ?

  // Add imagemap checkbox.
  $form['imagemap'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable imagemap'),
    '#description' => t('Add imagemap functionality to this image field.'),
    '#default_value' => isset($instance['settings']['imagemap']) ? $instance['settings']['imagemap'] : FALSE,
    '#weight' => 20,
  );

  return $form;
}

/**
 * Implements hook_field_schema().
 */
function imagemaps_field_schema($field) {
  module_load_include('install', 'image');
  $schema = image_field_schema($field);
  // @todo should be long text and coordinates is probably better
  // update in attach_form if we change it.
  $schema['columns']['imagemap'] = array(
    'description' => "Imagemap coordinates",
    'type' => 'varchar',
    'length' => 128,
    'not null' => FALSE,
  );
  return $schema;
}

/**
 * Implements hook_field_attach_form().
 */
function imagemaps_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode = NULL) {

  $instances = field_info_instances($entity_type, $form['#bundle']);

  foreach ($instances as $key => $field) {

    // Act only if imagemap is TRUE.
    if (isset($field['settings']['imagemap']) && !$field['settings']['imagemap']) {
      continue;
    }

    $language = isset($form[$key]['#language']) ? $form[$key]['#language'] : LANGUAGE_NONE;

    // Add coordinates to this field.
    $form[$key][$language][0]['imagemap'] = array(
      '#type' => 'textarea',
      '#default_value' => isset($entity->{$key}{$language}[0]['imagemap']) ? $entity->{$key}{$language}[0]['imagemap'] : '',
    );

    // Add process function.
    $form[$key][$language]['#after_build'][] = 'imagemaps_manage_display';
  }
}

/**
 * Implements hook_field_is_empty().
 */
function imagemaps_field_is_empty($item, $field) {
  return image_field_is_empty($item, $field);
}

/**
 * Implements hook_field_formatter_info().
 */
function imagemaps_field_formatter_info() {

  return array(
    'image_imagemap' => array(
      'label' => t('Imagemap'),
      'field types' => array('image'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function imagemaps_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  switch ($display['type']) {
    case 'image_imagemap':

      if (isset($instance['settings']['imagemap']) && $instance['settings']['imagemap']) {
        $field_name = $field['field_name'];
        // @todo get this from instance settings also.
        $image_style = 'large';
        $output = imagemaps_render($entity, $image_style, $field_name);
        $element[0] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Create and manage imagemaps.
 *
 * @param array $field_image
 *   The image field that will have coordinates on top.
 * @param array $field_coordinates
 *   A textfield where we will store the coordinates.
 * @param String $image_style
 *   The image style for the imagemap.
 */
function imagemaps_manage_display($field_image) {

  // @todo get this from settings.
  $image_style = 'large';

  if (isset($field_image[0]['#default_value'], $field_image[0]['#file']->uri)) {

    // Build field coordinates textarea.
    $field_coordinates = &$field_image[0]['imagemap'];

    // @todo pass default value here
    $coordinates = array();
    $field_coordinates['#prefix'] = _imagemaps_render($field_image[0]['#file']->uri, $coordinates, $image_style);

    $properties = _imagemaps_load_imagestyle($image_style);
    $field_coordinates['#prefix'] .= '<div id="imagemap-edit" style="width: ' . (900 - $properties['width']) . 'px; height: ' . $properties['height'] . 'px"></div>';

    // Hide the coordinates.
    $field_coordinates['#prefix'] .= '<br style="clear: both; width: 100%;" />';
    //$field_coordinates['#prefix'] .= '<div style="display: none;">';
    //$field_coordinates['#suffix'] = '</div>';

    // Add a class to handle.
    if (!isset($field_coordinates['#attributes']['class'])) {
      $field_coordinates['#attributes']['class'] = array();
    }
    $field_coordinates['#attributes']['class'][] = 'imagemap-coordinates';
  }

  // Attach the javascript and css files for the imagemap UI.
  $field_coordinates['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'imagemaps') . '/imagemaps.js',
      drupal_get_path('module', 'imagemaps') . '/imagemaps.admin.js'),
    'css' => array(
      drupal_get_path('module', 'imagemaps') . '/imagemaps.css')
  );

  return $field_image;
}

/**
 * Render the imagemap by entity and imagemap configuration.
 * This function will be used on frontend displays.
 * @see imagemaps_manage_display
 *   Administration form function to achieve the same effect.
 */
function imagemaps_render($entity, $image_style, $image_field) {

  $language = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
  $coordinates = (isset($entity->{$image_field}[$language][0]['imagemap'])) ? $entity->{$image_field}[$language][0]['imagemap'] : '';

  $output = '';
  // @todo fallback if coordinates is empty or malformed and simply return the style?
  if (!empty($coordinates)) {

    // Load the file.
    // @todo probably add more validation like in image_prepare_view().
    $file = file_load($entity->{$image_field}[$language][0]['fid']);
    $output = _imagemaps_render($file->uri, $coordinates, $image_style, $language);

    // Attach the javascript and css files for the imagemap UI.
    // @todo use attached so caching can work ?
    drupal_add_js(drupal_get_path('module', 'imagemaps') . '/imagemaps.js');
    drupal_add_css(drupal_get_path('module', 'imagemaps') . '/imagemaps.css');

  }

  return $output;
}

/**
 * Helper function to render the imagemap.
 *
 * @param string $image_uri
 *   The uri of the image
 * @param string $storage
 *   The stored coordinates in raw format

 * @return
 *   A string with valid html with the rendered imagemap.
 */
function _imagemaps_render($image_uri, $storage, $image_style) {

  $output = '';

  $properties = _imagemaps_load_imagestyle($image_style);

  $variables = array('path' => $image_uri, 'style_name' => $image_style);
  $output .= '<div id="media-imagemap" style="width: ' . $properties['width'] . 'px; height: ' . $properties['height'] . 'px">';
  $output .= theme('image_style', $variables);

  // List the coordinates.
  if (count($storage) > 0) {
    foreach (explode(";", $storage) as $marker) {
      parse_str($marker);
      // available: x, y, id, description.
      $output .= '<a href="#" rel="' . $x . '-' . $y . '" title="' . check_plain($description) . '" alt="' . check_plain($description) . '" class="bullet"></a>';
    }
  }
  $output .= '</div>';

  return $output;

}

/**
 * Helper function to get DOM properties for imagestyles.
 */
function _imagemaps_load_imagestyle($image_style) {

  static $image_styles = array();

  if (!isset($image_styles[$image_style])) {
    // Fetch the $image_style image style, using its width and height
    // for wrap the image rendered by image style.
    $properties = image_style_load($image_style);
    foreach ($properties['effects'] as $effect) {
      $image_styles[$image_style]['name'] = $image_style;
      $image_styles[$image_style]['width'] = $effect['data']['width'];
      $image_styles[$image_style]['height'] = $effect['data']['height'];
      break;
    }
  }

  return $image_styles[$image_style];
}
